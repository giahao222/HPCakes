@model HPCakes.Models.orders_detail

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/admin/Views/Shared/_AdminLayout.cshtml";
}





<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-red">
                <div class="panel-heading" style="background-color: #f195b2; border-color: #f195b2">
                    Sửa Thông Tin Sản Phẩm
                </div>
                <!-- /.panel-heading -->
                <div class="panel-body">
                    @using (Html.BeginForm("Edit", "orders_detail", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.order_id, "order_id", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("order_id", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.order_id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.product_id, "product_id", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("product_id", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.product_id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.total, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.total, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.total, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Lưu" class="btn btn-primary" />
                                </div>
                            </div>
                        </div>
                    }
                    <div>
                        @Html.ActionLink("Quay lại", "Index", "orders_detail", new { id = ViewBag.OrderId }, null)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section _Footer
{
    <script src="~/Areas/admin/Content/ckfinder/ckfinder.js"></script>
    <script src="~/Areas/admin/Content/ckeditor/ckeditor.js"></script>
    <script type="text/javascript">
        var editor = CKEDITOR.replace("description");
        var editor = CKEDITOR.replace("description", { height: '600px' });
        customConfig: '/Areas/admin/Content/ckeditor/config.js';
    </script>
    <script>
        $(function () {
            $("#name").keyup(function () {
                var text = $.trim($(this).val().toLowerCase());
                var text_create;
                text_create = text.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a").replace(/\ /g, '-').replace(/đ/g, "d").replace(/đ/g, "d").replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y").replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u").replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ.+/g, "o").replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ.+/g, "e").replace(/ì|í|ị|ỉ|ĩ/g, "i");
                $('#meta').val(text_create);
            }).keyup();
        });
    </script>
    <script>
        function previewImage(event) {
            var reader = new FileReader();
            reader.onload = function () {
                var output = document.getElementById('imageContainer');
                output.style.backgroundImage = "url('" + reader.result + "')";
                output.style.display = 'block'; // Hiển thị hình ảnh sau khi đã chọn
            };
            reader.readAsDataURL(event.target.files[0]);
        };
    </script>
    <script>
        var timeout = null; // Biến để lưu trữ timeout
        $(document).ready(function () {
            // Hàm để cập nhật tổng
            function updateTotal() {
                var quantity = parseInt($('#quantity').val()); // Lấy giá trị số lượng
                var price = parseFloat($('#price').val()); // Lấy giá trị giá
                if (!isNaN(quantity) && !isNaN(price)) { // Kiểm tra xem liệu chúng có phải là số hợp lệ không
                    var total = quantity * price; // Tính tổng
                    $('#total').val(total.toFixed(2)); // Hiển thị tổng với 2 chữ số sau dấu phẩy
                }
            }

            // Sự kiện khi số lượng hoặc giá thay đổi
            $('#quantity, #price').on('input', function () {
                clearTimeout(timeout); // Đặt lại timeout nếu có sự thay đổi
                timeout = setTimeout(updateTotal, 200); // Đợi 1 giây trước khi cập nhật tổng
            });
        });
    </script>

}
